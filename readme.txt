常用的管理工具：
                CVS (跨平台)
                SVN (跨平台)
                VSS (只用于微软)

GIT (Linux的缔造者、维护者、开发者)

特点：
    1、存储模式
        Git 分步式管理          代码仓库可以部署在任意位置（U盘、磁盘、网络服务器－－可以有多台）
            安全性和操作性都很好
        CVS SVN VSS 集中式管理  代码仓库必须要安装在一台中央服务器上
            安全性和操作性较差（必须有网络介入、鸡蛋放在一个篮子里）

    2、管理模式
        GIT 代码由三阶段提交（中间在代码工作区和仓库之间加入了暂存区，可以轻松实现文件的快照、镜像，便于比较、索引、维护）

     阶段            状态                       操作
    工作区      Untracked(未跟踪)       需要加入暂存－－通过命令add
    暂存区      staged(已暂存)          需要提交仓库－－通过命令commit
    仓库区      Commited(已提交)        检出代码工作－－通过命令checkout

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

查看版本
    git --version

查看常用命令
    git --help

查看全部命令
    git help -a (按q键退出浏览)

查看某个命令的详细帮助
    git help commit
    git commit --help

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

将代码所在目录初始化为一个仓库
    git init (进入到项目根目录下执行)
    会创建一个.git隐藏目录，这就是仓库！

    查看当前项目下所有文件的状态 (哪些文件/目录被暂存，哪些文件/目录被暂存但尚未提交，哪些文件被修改了，被重命名了，被移除了...)
        git status

    红色：文件/目录未被暂存
    绿色：文件/目录尚未被提交 (已被暂存)

注意：
    1、Git只能对文本文件的内容变化进行识别和追踪，图片等二进制文件，无法进行内容管理！ (可以暂存提交)
    2、有些文件内容我们是不期望被Git管理的（临时文件、编译生产文件、备份文件等），这时可以在项目根下
        创建一个忽略文件，在忽略文件中定义的文件，通过git status就不会提示它们的跟踪状态！

暂存需要被托管的文件
    git add index.html hello.txt

    表示将所有的未被暂存的内容加入暂存
        git add .
        git add -A
        git add --all

    撤销暂存（可能没写完还需要继续编辑或者这个文件不希望被托管）
        git rm --cached index.html hello.txt

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

注意：只有绿色的文件/目录，在commit提交时，才会被写入仓库
    （不经过add就直接commit［还是红色就commit］没有意义）

    git commit -m   "当前提交的描述, 应该要具有意义, 便于以后别人或者自己回溯时查看"

设置当前仓库的使用者姓名和联系邮箱 (只对当前仓库有效)
    git config user.name "Chloe"
    git config user.email "Chloe@foxmail.com"

     设置全局所有仓库都适用的使用者姓名和联系邮箱
        git config --global user.name "Chloe"
        git config --global user.email "Chloe@foxmail.com"

查看当前/全局仓库的使用者姓名
    git config user.name
    git config --global user.email

查看提交日志（历史）
    git log  (提交作者、联系方式、时间、注释)

筛选最近一次提交的记录
    git log -1 (-n 最近n条记录)

筛选指定用户的提交（对作者和联系方式两个字段进行筛选, 可模糊筛选）
    git log --author

筛选指定时间之后提交的记录
    git log --after 16:10
    git log --after "Wed Aug 21 16:10:00 2019 +0800"

筛选指定时间之前提交的记录
    git log --before "Wed Aug 21 16:10:00 2019 +0800"

筛选指定时间段之间提交的记录
    git log --after 16:00 --before 16:10

多个筛选条件的组合
    git log --after 16:00 --before 16:20 --author Chloe

只查看提交信息的精简显示 (只包含提交id和注释－－因为记录回滚只和提交id有效，你可能要根据注释回到那个id)
    git log --oneline

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

删除文件
    方法一：
        先从本机删除文件
        然后加入暂存
        最后提交

    方法二：
        git rm 要删除的文件（就会把文件从本机删掉，然后再加入暂存）
        最后提交

重命名文件
    直接在本机重命名
    git add 重命名前的文件名 重命名后的文件名
    最后提交

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

实现三个区之间的文件比较：
    仓库区: <hr>
    暂存区: <hr color="red">
    工作区: <hr color="green">

    比较暂存区和工作区：
        git diff homepage.html

    比较暂存区和仓库区：
        git diff --cached homepage.html

    比较工作区和仓库区：
        git diff HEAD homepage.html

    注意：差异代码行是由红色和绿色标示的，
            绿色是相对近的区－－工作区，
            红色是相对远的区－－暂存区

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

代码回溯

        先通过 git log --oneline 查看提交ID

    1、取消当前工作区的任何改动，回溯到仓库的最近版本
        git reset --hard

    2、将工作区代码回溯到仓库区的某个时间点（指定的提交ID）
        git reset --hard fba01d5

        注意：当你回溯到某个时间点，那么，git log 就只能查看该时间点之前的历史！

    3、此时，你又想回溯回去，但是 git 又看不见之前提交的ID，如何回去？

        通过 git reflog 可以查看所有的操作日志（git log 只能查看当前提交点之前的）

        再次通过 git reset --hard b18639a，就可以往后回溯了！

    4、选择回溯指定文件到仓库最新版
        git checkout -- homepage.html

    5、选择回溯指定文件到仓库区的某个时间点（指定的提交ID）
        git checkout b18639a -- homepage.html
    
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

分支
    现在有一个项目已经开发到一个稳定阶段
    这时出现两个问题：  
        1、需要赶紧修复之前遇到的bugs
        2、客户有新的需求，需要在此版本上开发新的功能
    这两个任务同时进行，相互之间不能影响，两个进度都不可控

    这时我们就需要在当前版本上切出两个人分支，这两个分支都是当前项目的镜像
        但是两个分支又相互独立，任何分支开发完毕后，只要和主分支合并即可

    这样做的好处：多个任务同时进行，相互之间既不干扰，又可以最终合并！

    前面所有的工作都是在一个分支上进行的，这个分支在创建仓库时就已经存在了，称主分支（master）

    查看当前所有的分支（绿色带 * 的是当前正在操作的分支）
        git branch      * master

    

    修复
    新功能
        都是当前版本的镜像

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－