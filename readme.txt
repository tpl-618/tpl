常用的管理工具：
                CVS (跨平台)
                SVN (跨平台)
                VSS (只用于微软)

GIT (Linux的缔造者、维护者、开发者)

特点：
    1、存储模式
        Git 分步式管理          代码仓库可以部署在任意位置（U盘、磁盘、网络服务器－－可以有多台）
            安全性和操作性都很好
        CVS SVN VSS 集中式管理  代码仓库必须要安装在一台中央服务器上
            安全性和操作性较差（必须有网络介入、鸡蛋放在一个篮子里）

    2、管理模式
        GIT 代码由三阶段提交（中间在代码工作区和仓库之间加入了暂存区，可以轻松实现文件的快照、镜像，便于比较、索引、维护）

     阶段            状态                       操作
    工作区      Untracked(未跟踪)       需要加入暂存－－通过命令add
    暂存区      staged(已暂存)          需要提交仓库－－通过命令commit
    仓库区      Commited(已提交)        检出代码工作－－通过命令checkout

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

查看版本
    git --version

查看常用命令
    git --help

查看全部命令
    git help -a (按q键退出浏览)

查看某个命令的详细帮助
    git help commit
    git commit --help

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

将代码所在目录初始化为一个仓库
    git init (进入到项目根目录下执行)
    会创建一个.git隐藏目录，这就是仓库！

    查看当前项目下所有文件的状态 (哪些文件/目录被暂存，哪些文件/目录被暂存但尚未提交，哪些文件被修改了，被重命名了，被移除了...)
        git status

    红色：文件/目录未被暂存
    绿色：文件/目录尚未被提交 (已被暂存)

注意：
    1、Git只能对文本文件的内容变化进行识别和追踪，图片等二进制文件，无法进行内容管理！ (可以暂存提交)
    2、有些文件内容我们是不期望被Git管理的（临时文件、编译生产文件、备份文件等），这时可以在项目根下
        创建一个忽略文件，在忽略文件中定义的文件，通过git status就不会提示它们的跟踪状态！

暂存需要被托管的文件
    git add index.html hello.txt

    表示将所有的未被暂存的内容加入暂存
        git add .
        git add -A
        git add --all

    撤销暂存（可能没写完还需要继续编辑或者这个文件不希望被托管）
        git rm --cached index.html hello.txt

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

注意：只有绿色的文件/目录，在commit提交时，才会被写入仓库
    （不经过add就直接commit［还是红色就commit］没有意义）

    git commit -m   "当前提交的描述, 应该要具有意义, 便于以后别人或者自己回溯时查看"

    设置当前仓库的使用者姓名和联系邮箱
        git config user.name "Chloe"
        git appleuser$ git config user.email "Chloe@foxmail.com"

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－